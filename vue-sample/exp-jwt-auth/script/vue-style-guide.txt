*** Priority B Rules: Strongly Recommended (Improving Readability) ***
  [Private property names] 
  var myGreatMixin = {
    methods: {
      publicMethod() {
        myPrivateFunction()
      }
    }
  }

  function myPrivateFunction() {

  }

  export default myGreatMixin

  [Component files]
  - PascalCase
  components/
  |- TodoList.js
  |- TodoItem.js

  components/
  |- TodoList.vue
  |- TodoItem.vue

  [Single-file component filename casing]
  - PascalCase or kebab-case
  components/
  |- MyComponent.vue

  components/
  |- my-component.vue

  [Base component names]
  - begin with a specific prefix, such as Base, App, or V
  components/
  |- BaseButton.vue
  |- BaseTable.vue
  |- BaseIcon.vue

  components/
  |- AppButton.vue
  |- AppTable.vue
  |- AppIcon.vue

  components/
  |- VButton.vue
  |- VTable.vue
  |- VIcon.vue

  [Single-instance component names]
  - begin with the The prefix, to denote that there can be only one
  components/
  |- TheHeading.vue
  |- TheSidebar.vue

  [Tightly coupled component names]
  - Child components that are tightly coupled with their parent should include the parent component name as a prefix
  components/
  |- TodoList.vue
  |- TodoListItem.vue
  |- TodoListItemButton.vue

  components/
  |- SearchSidebar.vue
  |- SearchSidebarNavigation.vue

  [Order of words in component names]
  - Component names should start with the highest-level (often most general) words and end with descriptive modifying words.
  components/
  |- SearchButtonClear.vue
  |- SearchButtonRun.vue
  |- SearchInputQuery.vue
  |- SearchInputExcludeGlob.vue
  |- SettingsCheckboxTerms.vue
  |- SettingsCheckboxLaunchOnStartup.vue

  [Self-closing components]
  - Components with no content should be self-closing in single-file components, string templates, and JSX 
  - but never in DOM templates.

  <!-- In single-file components, string templates, and JSX -->
  <MyComponent />

  <!-- In DOM templates -->
  <my-component></my-component>

  [Component name casing in templates]
  - In most projects, component names should always be PascalCase in single-file components and string templates 
  - but kebab-case in DOM templates.

  <!-- In single-file components and string templates -->
  <MyComponent/>

  <!-- In DOM templates -->
  <my-component></my-component>

  [Component name casing in JS/JSX]
  - Component names in JS/JSX should always be PascalCase, though they may be kebab-case inside strings 
  - for simpler applications that only use global component registration through Vue.component.

  Vue.component('MyComponent', {

  })

  Vue.component('my-component', {

  })

  import MyComponent from './MyComponent.vue'

  export default {
    name: 'MyComponent',
  }

  [Full-word component names]
  - Component names should prefer full words over abbreviations.
  components/
  |- StudentDashboardSettings.vue
  |- UserProfileOptions.vue

  [Prop name casing]
  - Prop names should always use camelCase during declaration
  - but kebab-case in templates and JSX.
  props: {
    greetingText: String
  }

  <WelcomeMessage greeting-text="hi"/>

  [Multi-attribute elements]
  - Elements with multiple attributes should span multiple lines, with one attribute per line.
  <img
    src="https://vuejs.org/images/logo.png"
    alt="Vue Logo"
  >

  <MyComponent
    foo="a"
    bar="b"
    baz="c"
  />

  [Simple expressions in templates]
  - Component templates should only include simple expressions
  - with more complex expressions refactored into computed properties or methods.

  <!-- In a template -->
  {{ normalizedFullName }}

  <!-- The complex expression has been moved to a computed property -->
  computed: {
    normalizedFullName: function () {
      return this.fullName.split(' ').map(function (word) {
        return word[0].toUpperCase() + word.slice(1)
      }).join(' ')
    }
  }

  [Simple computed properties]
  - Complex computed properties should be split into as many simpler properties as possible.

  computed: {
    basePrice: function () {
      return this.manufactureCost / (1 - this.profitMargin)
    },
    discount: function () {
      return this.basePrice * (this.discountPercent || 0)
    },
    finalPrice: function () {
      return this.basePrice - this.discount
    }
  }

  [Quoted attribute values]
  - Non-empty HTML attribute values should always be inside quotes (single or double, whichever is not used in JS)
  
  <input type="text">
  
  <AppSidebar :style="{ width: sidebarWidth + 'px' }">

  [Directive shorthands]
  - Directive shorthands (: for v-bind:, @ for v-on: and # for v-slot) should be used always or never

  <input
    :value="newTodoText"
    :placeholder="newTodoInstructions"
  >

  <input
    v-bind:value="newTodoText"
    v-bind:placeholder="newTodoInstructions"
  >

  <input
    @input="onInput"
    @focus="onFocus"
  >

  <input
    v-on:input="onInput"
    v-on:focus="onFocus"
  >

  <template v-slot:header>
    <h1>Here might be a page title</h1>
  </template>

  <template v-slot:footer>
    <p>Here's some contact info</p>
  </template>

  <template #header>
    <h1>Here might be a page title</h1>
  </template>

  <template #footer>
    <p>Here's some contact info</p>
  </template>
  
*** Priority C Rules: Recommended (Minimizing Arbitrary Choices and Cognitive Overhead) ***
  [Component/instance options order]
  - Component/instance options should be ordered consistently.
  
  1. Side Effects (triggers effects outside the component)
    el
  
  2. Global Awareness (requires knowledge beyond the component)
    name
    parent

  3. Component Type (changes the type of the component)
    functional

  4. Template Modifiers (changes the way templates are compiled)
    delimiters
    comments

  5. Template Dependencies (assets used in the template)
    components
    directives
    filters

  6. Composition (merges properties into the options)
    extends
    mixins

  7. Interface (the interface to the component)
    inheritAttrs
    model
    props/propsData

  8. Local State (local reactive properties)
    data
    computed

  9. Events (callbacks triggered by reactive events)
    watch

  10. Lifecycle Events (in the order they are called)
    beforeCreate
    created
    beforeMount
    mounted
    beforeUpdate
    updated
    activated
    deactivated
    beforeDestroy
    destroyed

  11. Non-Reactive Properties (instance properties independent of the reactivity system)
    methods

  12. Rendering (the declarative description of the component output)
    template/render
    renderError
    
  [Element attribute order]
  - The attributes of elements (including components) should be ordered consistently.
  
  1. Definition (provides the component options)
    is

  2. List Rendering (creates multiple variations of the same element)
    v-for

  3. Conditionals (whether the element is rendered/shown)
    v-if
    v-else-if
    v-else
    v-show
    v-cloak

  4. Render Modifiers (changes the way the element renders)
    v-pre
    v-once

  5. Global Awareness (requires knowledge beyond the component)
    id

  6. Unique Attributes (attributes that require unique values)
    ref
    key

  7. Two-Way Binding (combining binding and events)
    v-model

  8. Other Attributes (all unspecified bound & unbound attributes)
    v-slot (#)
    v-bind (:)

  9. Events (component event listeners)
    v-on (@)

  10. Content (overrides the content of the element)
    v-html
    v-text

  [Empty lines in component/instance options]
  - You may want to add one empty line between multi-line properties, 
  - particularly if the options can no longer fit on your screen without scrolling.
  
  [Single-file component top-level element order]
  - Single-file components should always order <template>, <script>, and <style> tags consistently, 
  - with <style> last, because at least one of the other two is always necessary.
  
  <template>...</template>
  <script>/* ... */</script>
  <style>/* ... */</style>
  
*** Priority D Rules: Use with Caution (Potentially Dangerous Patterns) ***   
  [v-if/v-else-if/v-else without key]
  - Itâ€™s usually best to use key with v-if + v-else, if they are the same element type (e.g. both <div> elements).
  
  <div
    v-if="error"
    key="search-status"
  >
    Error: {{ error }}
  </div>
  <div
    v-else
    key="search-results"
  >
    {{ results }}
  </div>
  
  [Element selectors with scoped]
  - Element selectors should be avoided with scoped.
  
  <template>
    <button class="btn btn-close">X</button>
  </template>

  <style scoped>
   .btn-close {
     background-color: red;
   }
  </style>
  
  [Implicit parent-child communication]
  - Props and events should be preferred for parent-child component communication, 
  - instead of this.$parent or mutating props.
  
  Vue.component('TodoItem', {
    props: {
      todo: {
        type: Object,
        required: true
      }
    },
    template: `
      <input
        :value="todo.text"
        @input="$emit('input', $event.target.value)"
      />
    `
  })

  Vue.component('TodoItem', {
    props: {
      todo: {
        type: Object,
        required: true
      }
    },
    template: `
      <span>
        {{ todo.text }}
        <button @click="$emit('delete')">
          X
        </button>
      </span>
    `
  })
  
  [Non-flux state management]
  - Vuex should be preferred for global state management,
  - instead of this.$root or a global event bus.
  
  // store/modules/todos.js
  export default {
    state: {
      list: []
    },
    mutations: {
      REMOVE_TODO (state, todoId) {
        state.list = state.list.filter(todo => todo.id !== todoId)
      }
    },
    actions: {
      removeTodo ({ commit, state }, todo) {
        commit('REMOVE_TODO', todo.id)
      }
    }
  }

  <!-- TodoItem.vue -->
  <template>
    <span>
      {{ todo.text }}
      <button @click="removeTodo(todo)">
        X
      </button>
    </span>
  </template>

  <script>
  import { mapActions } from 'vuex'

  export default {
    props: {
      todo: {
        type: Object,
        required: true
      }
    },
    methods: mapActions(['removeTodo'])
  }
  </script>

  
